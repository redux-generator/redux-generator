{"store_global_reducer":"<% if(options.ts) { -%>\nimport { combineReducers, Reducer } from \"redux\";\n<% } else { -%>\nimport { combineReducers } from \"redux\";\n<% } %>\n<% if(options.ts) { -%>\nimport { STORE } from \"./model\";\nimport { AuthActionTypes } from \"./authenticate/model\";\n<% } -%>\n// reducers\nimport { authenticateReducer } from \"./authenticate/reducer\";\n\nconst appReducer = combineReducers({\n  auth: authenticateReducer\n});\n\n<% if(options.ts) { -%>\ntype AppActions = AuthActionTypes;\n<% } -%>\n<% if(options.ts) { -%>\nexport const rootReducer: Reducer<STORE, AppActions> = (state, action): STORE => {\n<% } else { -%>\nexport const rootReducer = (state, action) => {\n<% } -%>\n  // if (action.type === GLOBAL_STORE_RESET) {\n  // \t// way to set global action\n  // \treturn initialStore;\n  // }\n\n  return appReducer(state, action);\n};\n","store_index":"import { createStore, applyMiddleware, compose } from \"redux\";\nimport { createLogger } from \"redux-logger\";\n<% if(options.saga) { -%>\nimport createSagaMiddleware from \"redux-saga\"\n<% } -%> \nimport { initialStore } from \"./initial-store\";\nimport { rootReducer } from \"./global-reducer\";\n<% if(options.saga) { -%>\nimport rootSaga from \"./saga\";\n<% } -%>\n<% if(options.ts) { -%>\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n<% } -%>\nconst composeEnhancers =\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && process.env.NODE_ENV !== \"production\"\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    : compose;\n\n<% if(options.saga) { -%>\nconst sagaMiddleware = createSagaMiddleware();\n<% } -%>\n<% if(options.ts) { -%>\n<% if(options.saga) { -%>\nlet middleWares: any = [sagaMiddleware];\n<% } else { -%>\nlet middleWares: any = [];\n<% } -%>\n<% } else { -%>\n<% if(options.saga) { -%>\nlet middleWares = [sagaMiddleware];\n<% } else { -%>\nlet middleWares = [];\n<% } -%>\n<% } -%>\n\nif (process.env.NODE_ENV === \"development\") {\n  const logger = createLogger({\n    collapsed: true,\n  });\n  middleWares = [...middleWares, logger];\n}\n\nexport default createStore(rootReducer, initialStore, composeEnhancers(applyMiddleware(...middleWares)));\n\n<% if(options.saga) { -%>\nsagaMiddleware.run(rootSaga);\n<% } -%> ","store_initial_store":"export const initialStore = {\n  auth: {}\n};\n","store_model":"import { AUTH } from \"./authenticate/model\";\n\nexport type STORE = {\n  auth: AUTH;\n};\n","saga_index":"import { fork } from \"redux-saga/effects\";\n\nimport auth from \"./authenticate/saga\";\n\nexport default function* () {\n  yield fork(auth);\n}\n","store_auth_actions":"import * as types from \"./types\";\n<% if(options.ts) { -%>\nimport * as model from \"./model\";\nimport { inferLiteral } from \"./model\";\n<% } -%>\n\n<% Object.keys(worker).forEach(elem => { -%>\n// <%- worker[elem].comment %>\n<% for (let item of worker[elem].element){ -%>\n<% if(options.ts) { -%>\nexport const <%-item.actionName-%> = (payload: model.<%-item.actionPayload-%>) => ({\n  type: inferLiteral(types.<%-item.type-%>),\n  payload\n} as const);\n<% } else { -%>\nexport const <%-item.actionName-%> = (payload) => ({\n  type: types.<%-item.type-%>,\n  payload\n});\n<% } -%>\n<% } %>\n<% }); -%>","store_auth_types":"<% Object.keys(worker).forEach(elem => { -%>\n// <%- worker[elem].comment %>\n<%  for (let item of worker[elem].element){ -%>\nexport const <%-item.type-%> = \"<%-item.typePrefix-%>/<%-item.type-%>\";\n<% } -%>\n<% }); -%>","store_auth_reducer":"import * as types from \"./types\";\n<% if(options.ts) { -%>\nimport { <%-options.entityActionTypes-%>, <%-options.mainType-%> } from \"./model\";\n\nconst initialState: <%-options.mainType-%> = {};\n<% } else { %>\nconst initialState = {};\n<% } -%>\n<% if(options.ts) { -%>\nexport const <%-options.singleEntityLowerCase-%>Reducer = (state = initialState, action: <%-options.entityActionTypes-%>): <%-options.mainType-%> => {\n<% } else { %>\nexport const <%-options.singleEntityLowerCase-%>Reducer = (state = initialState, action) => {\n<% } -%>\n  switch (action.type) {\n<% Object.keys(worker).forEach(elem => { -%>\n<% for (let item of worker[elem].element){ -%>\n  case types.<%-item.type-%>: {\n    return { ...state };\n  }\n<% } %>\n<% }); -%>\n    default:\n      return state;\n  }\n};\n","store_auth_model":"import { Action } from \"redux\";\nimport * as actions from \"./actions\";\n\n// general for redux\ntype inferValueType<T> = T extends { [key: string]: infer U } ? U : never;\nconst iL = <U, T extends U>(arg: T): T => arg;\nexport const inferLiteral = <T extends string>(arg: T): T => iL(arg);\nexport type <%-options.entityActionTypes-%> = ReturnType<inferValueType<typeof actions>>;\n<% Object.keys(worker).forEach(elem => { %>\n// <%- worker[elem].comment %>\n<% for (let item of worker[elem].element){ -%>\nexport type <%-item.actionPayload-%> = {};\n<% } -%>\n<% for (let item of worker[elem].element){ -%>\n<% if(item.actionType) { %>\nexport type <%-item.actionType-%> = (payload: <%-item.actionPayload-%>) => <%-options.entityActionTypes-%>;\nexport interface <%-item.sagaType-%> extends Action {\n  payload: <%-item.actionPayload-%>;\n}\n<% } -%>\n<% } -%>\n<% }); -%>\n// main type\nexport type <%-options.mainType-%> = {};","saga_auth_index":"import { call, takeEvery, put } from \"redux-saga/effects\";\n\nimport * as types from \"./types\";\nimport * as actions from \"./actions\";\nimport { <%-options.apiNameTitle-%> } from './api';\n<% if(options.ts) { -%>\nimport {\n<% Object.keys(worker).forEach(elem => { -%>\n<% for (let item of worker[elem].element){ -%>\n<% if(item.sagaType) { -%>\n  <%-item.sagaType-%>,\n<% } -%>\n<% } -%>\n<% }); -%>\n} from \"./model\";\n<% } %>\n<% Object.keys(worker).forEach(elem => { -%>\n<% for (let item of worker[elem].element){ -%>\n<% if(item.sagaType) { -%>\n<% if(options.ts) { -%>\nfunction* <%-item.sagaFuncName-%>({ payload }: <%-item.sagaType-%>) {\n<% } else { -%>\nfunction* <%-item.sagaFuncName-%>({ payload }) {\n<% } -%>\n  try {\n    const response = yield call(<%-options.apiNameTitle-%>.<%-item.apiFuncName-%>);\n\n    yield put(actions.<%-item.sagaActions[0]-%>(response));\n  } catch (error) {\n    yield put(actions.<%-item.sagaActions[1]-%>(error));\n  }\n}\n<% } -%>\n<% } %>\n<% }); %>\nfunction* <%-options.singleEntityLowerCase-%>() {\n<% Object.keys(worker).forEach(elem => { -%>\n<% for (let item of worker[elem].element){ -%>\n<% if(item.sagaFuncName) { -%>\n  yield takeEvery(types.<%-item.type-%>, <%-item.sagaFuncName-%>);\n<% } -%>\n<% } -%>\n<% }); -%>\n}\n\nexport default <%-options.singleEntityLowerCase-%>;","auth_actions_test":"import * as actions from './actions';\nimport * as types from './types';\n\ndescribe('<%-options.singleEntityLowerCase-%> actions', () => {\n<% Object.keys(worker).forEach(elem => { -%>\n<% for (let item of worker[elem].element){ -%>\n  it('should create an action - <%-item.actionName-%>', () => {\n    const payload = {};\n    const expectedAction = { type: types.<%-item.type-%>, payload };\n    expect(actions.<%-item.actionName-%>(payload)).toEqual(expectedAction);\n  });\n<% } %>\n<% }); -%>\n});\n","auth_reducer_test":"import { <%-options.singleEntityLowerCase-%>Reducer } from './reducer';\nimport * as types from './types';\n<% if(options.ts) { -%>\nimport { inferLiteral } from \"./model\";\n<% } -%>\n\nconst initialStore = {};\n\ndescribe('<%-options.singleEntityLowerCase-%> reducer', () => {\n<% Object.keys(worker).forEach(elem => { -%>\n<% for (let item of worker[elem].element){ -%>\n  it('should handle <%-item.type-%>', () => {\n    const action = {\n<% if(options.ts) { -%>\n      type: inferLiteral(types.<%-item.type-%>),\n<% } else { -%>\n      type: types.<%-item.type-%>,\n<% } -%>\n      payload: {},\n    };\n    expect(<%-options.singleEntityLowerCase-%>Reducer(initialStore, action)).toEqual({ ...initialStore });\n  });\n<% } %>\n<% }); -%>\n  it('should handle default state', () => {\n<% if(options.ts) { -%>\n    expect(<%-options.singleEntityLowerCase-%>Reducer(initialStore, {} as any)).toEqual({ ...initialStore });\n<% } else { -%>\n    expect(<%-options.singleEntityLowerCase-%>Reducer(initialStore, {})).toEqual({ ...initialStore });\n<% } -%>\n  });\n});\n","auth_api":"const fakeRequest = () => new Promise((resolve) => setTimeout(() => resolve([]), 1000));\n\nexport const <%-options.apiNameTitle-%> = {\n<% Object.keys(worker).forEach(elem => { -%>\n<% for (let item of worker[elem].element){ -%>\n<% if(item.apiFuncName) { -%>\n  <%-item.apiFuncName-%>() {\n    return fakeRequest;\n  },\n<% } -%>\n<% } -%>\n<% }); -%>\n}"}